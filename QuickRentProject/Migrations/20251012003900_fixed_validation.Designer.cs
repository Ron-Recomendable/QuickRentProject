// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickRentProjectDb.Data;

#nullable disable

namespace QuickRentProject.Migrations
{
    [DbContext(typeof(QuickRentProjectDbContext))]
    [Migration("20251012003900_fixed_validation")]
    partial class fixed_validation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5269c1db-0a76-41f2-954d-8b5c067f13ce",
                            Email = "pheobe@example.com",
                            EmailConfirmed = true,
                            FirstName = "Pheobe",
                            LastName = "Townsend",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHEOBE@EXAMPLE.COM",
                            NormalizedUserName = "PHOEBE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP9hnfTycNLDG44nXCwPV9CR1IGQsh3iD4UvIMzFLakqJKk8byOVmZhLGXxmlhethw==",
                            PhoneNumber = "531531413",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "e8df04ec-dde6-4276-ab53-cd58f13a9ee8",
                            TwoFactorEnabled = false,
                            UserName = "Phoebe@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8483c89b-99e9-4794-b732-a2ffe6deefea",
                            Email = "Rivka@example.com",
                            EmailConfirmed = true,
                            FirstName = "Rivka",
                            LastName = "Simmons",
                            LockoutEnabled = false,
                            NormalizedEmail = "RIVKA@EXAMPLE.COM",
                            NormalizedUserName = "RIVKA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECNXtEpTQEZs5GEj938t5Ov701ew0H72wtKoINtZrnqM4Jt55c+SNVD7FLitRePVJA==",
                            PhoneNumber = "4211614135",
                            PhoneNumberConfirmed = false,
                            Role = "Owner",
                            SecurityStamp = "0674cd12-0e54-445a-b4ae-6f24614c4502",
                            TwoFactorEnabled = false,
                            UserName = "Rivka@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68d06abc-2973-442d-aa95-783ce8690195",
                            Email = "Alianna@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alianna",
                            LastName = "Murray",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIANNA@EXAMPLE.COM",
                            NormalizedUserName = "ALIANNA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENFpAgz4jp2nezLZEPILjPC6mClo+Fk4FeSpGRmiQy1oF9wBE6mX1ZdIDMQ8bm+gww==",
                            PhoneNumber = "7415135315",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "1b6c0924-4968-44fa-9292-6b0e26552a3c",
                            TwoFactorEnabled = false,
                            UserName = "Alianna@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb84fb69-e913-4ab3-93c6-6494b5ec4c89",
                            Email = "Carolyn@example.com",
                            EmailConfirmed = true,
                            FirstName = "Carolyn",
                            LastName = "Reese",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAROLYN@EXAMPLE.COM",
                            NormalizedUserName = "CAROLYN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPCzTRuxLPbWvHMVfckYiZXCLtixfadVTiH6aykyRM9ty2hitDeiEsVWo8Yy7xgivg==",
                            PhoneNumber = "631641431",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "1d91166d-b19b-480d-a723-95ce638b645e",
                            TwoFactorEnabled = false,
                            UserName = "Carolyn@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af2ed7e6-bfee-42dc-9a52-4630f41dd370",
                            Email = "Damian@example.com",
                            EmailConfirmed = true,
                            FirstName = "Damian",
                            LastName = "Fletcher",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAMIAN@EXAMPLE.COM",
                            NormalizedUserName = "DAMIAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDsOO/Aadfb5nvmXcWHOz6QYzuHChkRF9ZyNXdRk2vu8NNbZTqJutq+D9TCo0F0WHw==",
                            PhoneNumber = "5551234567",
                            PhoneNumberConfirmed = false,
                            Role = "Owner",
                            SecurityStamp = "2bdef713-f211-4f69-8e38-65c5a7b7f0d3",
                            TwoFactorEnabled = false,
                            UserName = "Damian@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d7ef11b-e199-45eb-8eec-907f717d6732",
                            Email = "Elara@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elara",
                            LastName = "Whitmore",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELARA@EXAMPLE.COM",
                            NormalizedUserName = "ELARA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEw6OHVLsx4jtwxB2bb/cbH5aPRQYLRb+vA1XjEH38YeN8a57LtOCNMUbYiUB0ps+A==",
                            PhoneNumber = "5552345678",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "14f6b6b9-8f61-4597-8699-4a5bdfb7ecb9",
                            TwoFactorEnabled = false,
                            UserName = "Elara@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab711494-cd9c-4308-bcb6-8ba6fb4e824a",
                            Email = "Gregory@example.com",
                            EmailConfirmed = true,
                            FirstName = "Gregory",
                            LastName = "Holloway",
                            LockoutEnabled = false,
                            NormalizedEmail = "GREGORY@EXAMPLE.COM",
                            NormalizedUserName = "GREGORY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED1U1wpkEKjYxCH1bFULdMzvE1WkahrB2nDr3XXRMwLBB2jIu3rgOtI+1QH6bAyxpw==",
                            PhoneNumber = "5553456789",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "8fcb7a0a-b361-457b-a2d6-e6a68319f8e0",
                            TwoFactorEnabled = false,
                            UserName = "Gregory@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6d63b6d-0b1f-41c1-880a-128a1ef82feb",
                            Email = "Hazel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Hazel",
                            LastName = "Bridges",
                            LockoutEnabled = false,
                            NormalizedEmail = "HAZEL@EXAMPLE.COM",
                            NormalizedUserName = "HAZEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOoGzswHipTpP9Fv3u0NAHfoL5sZt1iQL5+d3/bsMeWAD6flgbVxfENMD3k4XDW9yw==",
                            PhoneNumber = "5554567890",
                            PhoneNumberConfirmed = false,
                            Role = "Owner",
                            SecurityStamp = "208b718f-2758-4652-9ce2-8b7a4f7a6277",
                            TwoFactorEnabled = false,
                            UserName = "Hazel@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f4cea2d-0bb6-4170-b505-a73c3a41930a",
                            Email = "Ivan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ivan",
                            LastName = "Langley",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@EXAMPLE.COM",
                            NormalizedUserName = "IVAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ39uYgpHiNfh9rRsERa2jwQRhiIpJp8mNtkjmXQKL6cvxuUP7RDe4i8Z0YcAdDJRg==",
                            PhoneNumber = "5555678901",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "68063479-7350-4593-b312-6170491110e5",
                            TwoFactorEnabled = false,
                            UserName = "Ivan@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c499cd2-6c3c-4c0a-bcef-1bc437634357",
                            Email = "Jasmine@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jasmine",
                            LastName = "Everly",
                            LockoutEnabled = false,
                            NormalizedEmail = "JASMINE@EXAMPLE.COM",
                            NormalizedUserName = "JASMINE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPV46WkSq++bQyPx8OuGg/M2S00fJL6rNh/17ZlJCu188zyYgkQLWYaNL0d84fQx6Q==",
                            PhoneNumber = "5556789012",
                            PhoneNumberConfirmed = false,
                            Role = "Owner",
                            SecurityStamp = "d6bf2704-96f2-400c-a921-d7540eec910d",
                            TwoFactorEnabled = false,
                            UserName = "Jasmine@example.com"
                        });
                });

            modelBuilder.Entity("QuickRentProject.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("RenterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("BookingId");

                    b.HasIndex("ItemId");

                    b.HasIndex("RenterId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("QuickRentProject.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("ItemId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("QuickRentProject.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("QuickRentProject.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuickRentProject.Models.Booking", b =>
                {
                    b.HasOne("QuickRentProject.Models.Item", "Item")
                        .WithMany("Bookings")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", "Renter")
                        .WithMany("Bookings")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("QuickRentProject.Models.Item", b =>
                {
                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("QuickRentProject.Models.Payment", b =>
                {
                    b.HasOne("QuickRentProject.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("QuickRentProject.Models.Review", b =>
                {
                    b.HasOne("QuickRentProject.Models.Item", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Items");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("QuickRentProject.Models.Booking", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("QuickRentProject.Models.Item", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
