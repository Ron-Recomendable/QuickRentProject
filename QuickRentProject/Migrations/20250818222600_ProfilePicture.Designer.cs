// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickRentProjectDb.Data;

#nullable disable

namespace QuickRentProject.Migrations
{
    [DbContext(typeof(QuickRentProjectDbContext))]
    [Migration("20250818222600_ProfilePicture")]
    partial class ProfilePicture
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d73da51-1f04-4e46-ac6e-f379643d7d20",
                            Email = "pheobe@example.com",
                            EmailConfirmed = true,
                            FirstName = "Pheobe",
                            LastName = "Townsend",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHEOBE@EXAMPLE.COM",
                            NormalizedUserName = "PHOEBE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK01uXVBHyqLZj9CbIUIv86zcL+8gZoNnl7ZJDAx5QAJFNVNoUEFyln3UBW99dBR1g==",
                            PhoneNumber = "531531413",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "70dcb800-6a1c-48dc-be44-9c20e80e1237",
                            TwoFactorEnabled = false,
                            UserName = "Phoebe@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "101927d1-ed0f-4121-b222-053586c4247d",
                            Email = "Rivka@example.com",
                            EmailConfirmed = true,
                            FirstName = "Rivka",
                            LastName = "Simmons",
                            LockoutEnabled = false,
                            NormalizedEmail = "RIVKA@EXAMPLE.COM",
                            NormalizedUserName = "RIVKA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFxJL3h0SlG/RTp4x1g4d0g1SbYVcL5Q254N9MsJKUYKaMSy/CGRW5udzVB2DS33Yw==",
                            PhoneNumber = "4211614135",
                            PhoneNumberConfirmed = false,
                            Role = "Owner",
                            SecurityStamp = "57e1daee-0fd8-40cf-af45-187b8791d96e",
                            TwoFactorEnabled = false,
                            UserName = "Rivka@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33c45fde-1ddd-4f6d-a8f1-e25d43e9d9db",
                            Email = "Alianna@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alianna",
                            LastName = "Murray",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIANNA@EXAMPLE.COM",
                            NormalizedUserName = "ALIANNA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEByB25Ej21EmgHxUrSHN/LHxW/0tJGaueoffdiuzaIrTyQTpJrhe84xQjf8r8SvBkw==",
                            PhoneNumber = "7415135315",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "770646a8-bf06-49eb-9844-b64e95c68770",
                            TwoFactorEnabled = false,
                            UserName = "Alianna@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53c65f7b-b10f-4bbd-9f2c-15777fe57017",
                            Email = "Carolyn@example.com",
                            EmailConfirmed = true,
                            FirstName = "Carolyn",
                            LastName = "Reese",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAROLYN@EXAMPLE.COM",
                            NormalizedUserName = "CAROLYN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECmgPdmTZNsslp5ZAu5Vb+4478WfkmWlRJYXGGNAPCugaS0PFddPZLQ5E8TXiGTqLA==",
                            PhoneNumber = "631641431",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "c373cdcd-13f0-455a-9472-40e6d2c11354",
                            TwoFactorEnabled = false,
                            UserName = "Carolyn@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a10c0a2-d586-45c4-b362-35eda2a96c8f",
                            Email = "Damian@example.com",
                            EmailConfirmed = true,
                            FirstName = "Damian",
                            LastName = "Fletcher",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAMIAN@EXAMPLE.COM",
                            NormalizedUserName = "DAMIAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIBdPNdS0/Nq06jKJpG7nzQ33LmqO6nRUa1MCVxuU1//arb4TyGtpsBeXwnOqNaNMw==",
                            PhoneNumber = "5551234567",
                            PhoneNumberConfirmed = false,
                            Role = "Owner",
                            SecurityStamp = "ebdf7e7b-9f48-4383-a2a5-f01c715c9fca",
                            TwoFactorEnabled = false,
                            UserName = "Damian@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff341ba3-304f-4681-904f-f0002f10632b",
                            Email = "Elara@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elara",
                            LastName = "Whitmore",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELARA@EXAMPLE.COM",
                            NormalizedUserName = "ELARA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVHAFSUnKUG2Wtno5GroG0dR49Vou5mb+c76nI7DI5OSYTotu3AJhP8QA3kmJXPcg==",
                            PhoneNumber = "5552345678",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "43c7f6b9-0eec-4677-8e5d-87e31e64ca21",
                            TwoFactorEnabled = false,
                            UserName = "Elara@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf4e8984-910e-4736-8a5a-59c9c492ea61",
                            Email = "Gregory@example.com",
                            EmailConfirmed = true,
                            FirstName = "Gregory",
                            LastName = "Holloway",
                            LockoutEnabled = false,
                            NormalizedEmail = "GREGORY@EXAMPLE.COM",
                            NormalizedUserName = "GREGORY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHzsxYzLbTDiREgHGprrRTZ8pgdmXfRnqXUh9uZ/FX7pVz/k+f8pmPEQ2rY1LAVMgg==",
                            PhoneNumber = "5553456789",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "bf7b2fde-7492-4778-9eb5-5b0fbb3068b7",
                            TwoFactorEnabled = false,
                            UserName = "Gregory@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84599080-192f-4dfb-a723-5b83be1697fb",
                            Email = "Hazel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Hazel",
                            LastName = "Bridges",
                            LockoutEnabled = false,
                            NormalizedEmail = "HAZEL@EXAMPLE.COM",
                            NormalizedUserName = "HAZEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF+fVkGLF+kTGMmzuy9SitxxiAuV5+LHe4+u3Jwqws3386UXTx+LKkPBmf8i8i4NmA==",
                            PhoneNumber = "5554567890",
                            PhoneNumberConfirmed = false,
                            Role = "Owner",
                            SecurityStamp = "6a21904b-47e4-4b2f-bdbc-8ba3d4890ded",
                            TwoFactorEnabled = false,
                            UserName = "Hazel@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "092e99ab-8858-4e95-a203-d9fb9e529060",
                            Email = "Ivan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ivan",
                            LastName = "Langley",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@EXAMPLE.COM",
                            NormalizedUserName = "IVAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEVvLi77WS9QNPWOKZBs8xHrJF6OdpEOCS8/7bVYV2s3EoT4tDXgrWFKf5onpwoz4w==",
                            PhoneNumber = "5555678901",
                            PhoneNumberConfirmed = false,
                            Role = "Renter",
                            SecurityStamp = "40e24632-720d-4043-8717-7fa2bcb0c5de",
                            TwoFactorEnabled = false,
                            UserName = "Ivan@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39d5c093-515b-44e8-836a-65b7da47ea01",
                            Email = "Jasmine@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jasmine",
                            LastName = "Everly",
                            LockoutEnabled = false,
                            NormalizedEmail = "JASMINE@EXAMPLE.COM",
                            NormalizedUserName = "JASMINE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENVLwWYBIEmi4+nwlSTyyghKkmr4tpLRmDDsGpLVXdvJOgceptNCWnlgG3+NOnJwVQ==",
                            PhoneNumber = "5556789012",
                            PhoneNumberConfirmed = false,
                            Role = "Owner",
                            SecurityStamp = "a3087956-1cd0-476b-9382-bfef89f0fddc",
                            TwoFactorEnabled = false,
                            UserName = "Jasmine@example.com"
                        });
                });

            modelBuilder.Entity("QuickRentProject.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("RenterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("BookingId");

                    b.HasIndex("ItemId");

                    b.HasIndex("RenterId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("QuickRentProject.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("ItemId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("QuickRentProject.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("QuickRentProject.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuickRentProject.Models.Booking", b =>
                {
                    b.HasOne("QuickRentProject.Models.Item", "Item")
                        .WithMany("Bookings")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", "Renter")
                        .WithMany("Bookings")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("QuickRentProject.Models.Item", b =>
                {
                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("QuickRentProject.Models.Payment", b =>
                {
                    b.HasOne("QuickRentProject.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("QuickRentProject.Models.Review", b =>
                {
                    b.HasOne("QuickRentProject.Models.Item", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuickRentProject.Areas.Identity.Data.QuickRentProjectUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Items");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("QuickRentProject.Models.Booking", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("QuickRentProject.Models.Item", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
